---
title: "Bepalen fragility curves"
---

De continu inzicht toolbox heeft de functionaliteit om fragility curves voor verschillende faalmechanisme uit te rekenen. Deze sectie beschrijft de beschikbare functies per type faalmechanisme. In Toolbox Continu Inzicht zijn 3 verschillende type fragility curves: GEKB, STPH en alle overige curves. Deze worden in het figuur hieronder weer gegeven.

![Overzicht van verschillende fragilityCurves in Toolbox Continu Inzicht](../assets/Overzicht_FragilityCurves_TBCI.png)

Golfoverslag Erosie Kruin en Binnentalud (GEKB) kunnen 'on-the-fly' worden berekend, afhankelijk van verschillende factoren kunnen deze worden aangepast. Voor SPTH kunnen curves vastgesteld worden met de beschikbare functionaliteit, maar dit moet vooraf plaatsvinden. Dit komt door een langere rekentijd en vanwege kwaliteitscontrole. Alle andere curves kunnen niet berekend worden binnen Toolbox Continu

### Golfoverslag Erosie Kruin en Binnentalud (GEKB){#sec-Bepalen-fragility-curves-GEKB}

Voor het bereken van fragility curves voor GEKB wordt gebruik gemaakt van de Python module [`pydra-core`](https://pypi.org/project/pydra-core/). Deze losstaande Python module is ontwikkeld door HKV en openbaar beschikbaar gemaakt op [GitHub](https://github.com/HKV-products-services/pydra_core). De documentatie is op deze GitHub pagina te vinden

Een fragility curve kan berekend door de functie `FragilityCurveOvertopping` aan te roepen. Hier zijn drie dataframes voor nodig: de eerste met informatie over de hellingen, de tweede over het profiel en als laatste informatie over de bodem en strijklengte. Voor de berekening wordt model onzekerheid mee genomen. Hiervoor zijn acht standaard waardes gebruikt voor [bretschneider](https://tl.iplo.nl/@192798/golfgroei-bijlage-golfberekeningen-volgens/) waarmee golf hoogte en periode worden bepaald. Deze kunnen aangepast worden als opties in de `config.yaml`, zo als te zien in het voorbeeld met `gh_onz_mu`. Naast onzekerheden kan ook de verhouding tussen de piek periode van de golf (`$T_p$`) en de spectrale golfperiode (`$Tm_{-1,0}$`) worden aangepast met `tp_tspec` (standaard 1.1). Ook zijn er reken instellingen waarmee wordt gerekend. Hier zijn nog vier instellingen die aangepast kunnen worden. De waterniveaus waarmee probabilistisch gerekend wordt is verdeelt in twee delen: grof en fijn. Standaard zijn fijne stappen van 2m (`upper_limit_coarse`)  onder de kruin tot 1.01m (`upper_limit_fine`) boven de kruin met stappen van 0.05 (`hstap`). Standaard grove stappen lopen van 4m (`lower_limit_coarse`) onder de kruin tot 2m (`upper_limit_coarse`) onder de kruin met stappen van twee keer zo groot (2 * `hstap` = 0.1). Al deze variable zijn los te configureren, als er niks wordt opgegeven, worden de standaard genoemde waardes gebruikt.

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"
    # default waardes, kunnen worden overschreven
    FragilityCurveOvertopping:
        gh_onz_mu: 0.96
        gh_onz_sigma: 0.27
        gp_onz_mu_tp: 1.03
        gp_onz_sigma_tp: 0.13
        gp_onz_mu_tspec: 1.03
        gp_onz_sigma_tspec: 0.13
        gh_onz_aantal: 7
        gp_onz_aantal: 7
        tp_tspec: 1.1
        lower_limit_coarse: 4.0
        upper_limit_coarse: 2.0
        upper_limit_fine: 1.0
        hstap: 0.05

DataAdapter:
    default_options:
        csv:
            sep: ","
    slopes:
        type: csv
        file: "slopes.csv"
    profiles:
        type: csv
        file: "profiles.csv"
    bedlevel_fetch:
        type: csv
        file: "bedlevelfetch.csv"
    fragility_curves:
        type: csv
        file: "fragility_curves.csv"

```
## Code
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.fragility_curves import FragilityCurveOvertopping

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
fragility_curve_overtopping = FragilityCurveOvertopping(data_adapter=data_adapter)
fragility_curve_overtopping.run(
    input=["slopes", "profiles", "bedlevel_fetch"],
    output="fragility_curves",
)

```
:::

### Piping (STPH) {#sec-Bepalen-fragility-curves-STPH}
Voor het bereken van fragility curves voor piping (STPH) wordt gebruik gemaakt van de python module [`probabilistic_piping`](https://pypi.org/project/probabilistic-piping/). Deze los staande python module is ontwikkeld door HKV en is voor toolbox continu inzicht openbaar beschikbaar gemaakt op [GitHub](https://github.com/HKV-products-services/probabilistic_piping). De documentatie van deze module is daar ook te vinden.

>```{=html}
><span style="color: red; font-weight: bold;">Disclaimer:</span>
><span style="color: red;">
>De uitvoer van 'probabilistic-piping' geeft meer informatie over of een som in de berekening is gelukt, hier worden echter binnen Toolbox Continu Inzicht geen checks op gedaan. Het is aan de gebruiker om na te lopen of de curve die wordt gegenereerd daadwerkelijk logisch is.
></span>
>```

#### FragilityCurvePipingFixedWaterlevel {#sec-Bepalen-fragility-curves-STPH-combined}

De functie `FragilityCurvePipingFixedWaterlevel` rekent met de drie sub-mechanismes uplift, heave, Sellmeijer en geeft een gecombineerde curve terug. Het combineren gebeurt hier door het minimum van de kansen per sub mechanisme te nemen. De curves van de sub-mechanismes zijn beschikbaar via de`df_result_uplift`, `df_result_heave`, en `df_result_sellmeijer` attributen.

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"

    FragilityCurvePipingFixedWaterlevel:
        debug: False
        progress: True


DataAdapter:
    default_options:
        csv:
            sep: ","

    probabilistic_input:
        type: excel
        file: "invoer_piping.xlsx"
        index_col: 0
    waterlevels:
        type: csv
        file: "waterlevels.csv"
    fragility_curve:
        type: csv
        file: "fragility_curves_piping.csv"


```
## Code
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.fragility_curves import FragilityCurvePipingFixedWaterlevel

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
fragility_curve_piping_fixed_waterlevel = FragilityCurvePipingFixedWaterlevel(data_adapter=data_adapter)
fragility_curve_piping_fixed_waterlevel.run(
    input=["probabilistic_input", "waterlevels"],
    output="fragility_curves",
)

```
:::

### Combineren van fragility curves{#sec-Combineren-van-fragility-curves}

Fragility curves kunnen op drie manieren worden gecombineerd: Afhankelijk, onafhankelijk of met een gewogen gemiddelde. De tabel hieronder geeft hier een overzicht van.

| Type             | Functie                           | Formule                              |
|------------------|-----------------------------------|--------------------------------------|
|Afhankelijk       |`CombineFragilityCurvesIndependent`|$P(fail,comb|h)=1-prod(1-P(fail,i|h))$|
|Onafhankelijk     |`CombineFragilityCurvesDependent`  |$P(fail,comb|h)=max(P(fail,i|h))$     |
|Gewogen gemiddelde|`CombineFragilityCurvesWeightedSum`|$P(fail,comb|h)=\sum_{i=1}^{n}(w_i*P(fail,i|h))$ |

Alle drie de functies verwachten een lijst met namen van de data adapters van de fragility curves die gecombineerd moeten worden.
Bij de gewogen gemiddelde functie moet de laatste data adapter de gewichten bevatten waarmee de fragility curves worden gecombineerd.
De gewichten dataframe moet een kolom met 'weights' hebben, er is met opzet geen validatie of deze gewichten optellen tot 1 zodat de curve ook geschaald kan worden. De tabel hieronder geeft weer hoe de gewichten table er uit moet zien.

| weights  |
|----------|
|0.6       |
|0.4       |

Bij het combineren van de fragility curves moeten de waterstanden van de curves op elkaar afgestemd worden. Dit wordt gedaan op basis van de waterniveaus, en nog twee parameters: hoe ver voorbij de hoogste waarde `extend_past_max` (standaard waarde is 0.01) en met welke stap grootte `refine_step_size` (standaard waarde is 0.05)


::: {.panel-tabset}
## Configuratie (on)afhankelijk
```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    fragility_curve_piping_csv:
        type: csv
        file: "fragility_curve_piping.csv"

    fragility_curve_overtopping_csv:
        type: csv
        file: "fragility_curve_overtopping.csv"

    fragility_curves:
        type: csv
        file: "fragility_curve_combined.csv"

```
## Code (on)afhankelijk
```python
from toolbox_continu_inzicht import Config, DataAdapter

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)

from toolbox_continu_inzicht.fragility_curves import CombineFragilityCurvesIndependent

combine_fragility_curve = CombineFragilityCurvesIndependent(data_adapter=data_adapter)
combine_fragility_curve.run(
    input=["fragility_curve_piping_csv", "fragility_curve_overtopping_csv"],
    output="fragility_curves",
)

from toolbox_continu_inzicht.fragility_curves import CombineFragilityCurvesDependent

combine_fragility_curve_dep = CombineFragilityCurvesDependent(data_adapter=data_adapter)
combine_fragility_curve_dep.run(
    input=["fragility_curve_piping_csv", "fragility_curve_overtopping_csv"],
    output="fragility_curves",
)

```
## Configuratie gewogen gemiddelde
```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    fragility_curve_piping_csv:
        type: csv
        file: "fragility_curve_piping.csv"

    fragility_curve_overtopping_csv:
        type: csv
        file: "fragility_curve_overtopping.csv"

    weighting_factor_csv:
        type: csv
        file: "weighting_factor_combine.csv"

    fragility_curves:
        type: csv
        file: "fragility_curve_combined.csv"


```
## Code gewogen gemiddelde
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.fragility_curves import CombineFragilityCurvesWeightedSum

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
combine_fragility_curve = CombineFragilityCurvesWeightedSum(data_adapter=data_adapter)
combine_fragility_curve.run(
    input=["fragility_curve_piping_csv", "fragility_curve_overtopping_csv", "weighting_factor_csv"],
    output="fragility_curves",
)
```
:::
