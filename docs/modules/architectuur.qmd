---
title: "Basis architectuur Toolbox Continu Inzicht"
---
De architectuur van de Toolbox Continu Inzicht is ontworpen om flexibel te zijn.

### Configuratie

Per systeem kunnen de wensen van de gebruiker veranderen. Het systeem is dan ook te configureren voor verschillende databronnen.
Door middel van een `yaml` configuratiebestand wordt de juist informatie meegegeven aan de modules en de data-adapter.

Het kopje `GlobalVariables` is verplicht met minimaal een `rootdir`: dit is een map waarin de data bestanden staan en weggeschreven worden.
De `DataAdapter` is ook verplicht, met minimaal één data adapter. De naam van de data adapter is vrij te kiezen.
Er kunnen zoveel data adapters aangemaakt worden als gewenst.
```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"

DataAdapter:
    EenTypeDataAdapter:
        type: csv
        file: "eerste_voorbeeld.csv"
```


Onder `GlobalVariables` kan per datatype een variabele worden meegegeven die voor alle adapters van dit type gelden.
Voor `csv` kan dit bijvoorbeeld het scheidingsteken zijn.
Alle data adapters met het type `csv` krijgen nu de extra variabele mee.
```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"

DataAdapter:
    default_options:
        csv:
    	    sep: ";"
    EenTypeDataAdapter:
        type: csv
        file: "eerste_voorbeeld.csv"
    CSV_output:
        type: csv
        file: "voorbeeld_output.csv"
```


Naast de data-adapters worden modules ook geconfigureerd in de `GlobalVariables`. Zo worden de opties voor de module `LoadsMatroos` ook mee gegeven in de `GlobalVariables`.
```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"

    LoadsMatroos:
        website: "noos"
        source: "dcsm6_kf"
        parameters: ["waterlevel"]
        MISSING_VALUE: 999

DataAdapter:
	...
```

De tijd waarop de berekening van de toolbox plaatsvindt is ook te configureren met `calc_time`.
Deze tijd moet in het ISO 8601 format zijn en wordt uitgelezen met [datetime.datetime.fromisoformat](https://docs.python.org/3/library/datetime.html#datetime.date.fromisoformat).
Indien geen tijd wordt meegegeven, maakt de `Config` klasse deze zelf aan met het tijdstip van runnen.

```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"
    calc_time: '2024-11-18 08:00:00'

    LoadsMatroos:
        website: "noos"
        source: "dcsm6_kf"
        parameters: ["waterlevel"]
        MISSING_VALUE: 999

DataAdapter:
	...
```

### Data-adapter

De data-adapter wordt gebruikt om verschillende datatypes in en uit te lezen. Op dit moment zijn dit de volgende dataformaten:

1.  CSV
2.  NetCDF
3.  PostgreSQL

Deze wordt geconfigureerd in de een `.yaml` configuratiebestand. Een voorbeeld van een csv-bestand wordt hieronder weergegeven.
Hierbij zijn `type` en `file` of `path` verplicht. In het voorbeeld hieronder wordt een relatief pad meegegeven als `rootdir`, dit wordt ook ondersteund.

```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    my_csv_in:
        type: csv
        file: "test_csv_in.csv"
    my_csv_out:
        type: csv
        file: "test_csv_out.csv"
...
```

Indien een bestand buiten de root directory valt kan in plaats van `file` ook een absoluut `path` worden meegegeven.
```yaml
DataAdapter:
    MyCSV_anders:
        type: csv
        path: "C:/data/Ander/pad_naar_csv.csv"
...
```

Naast de verplichte waardes van een data-adapter worden ook alle overige opties doorgegeven.
Voor de generieke data-adapters is er een check of de extra opgegeven opties ondersteund worden.
Zo maakt de `csv` data adapter gebruik van [pandas.read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) en de `NetCDF` data adapter [xarray.open_dataset](https://docs.xarray.dev/en/stable/generated/xarray.open_dataset.html).
Voor `PostgreSQL` zijn alleen drie standaard opties beschikbaar: `database`, `schema` en `table`.

#### Adapters aanmaken vanuit Python

Naast het definiëren van data adapters via het configuratiebestand, kan dit ook vanuit Python zelf gedaan worden met de functie `set_dataframe_adapter`.

Dit kan op twee manieren:

1. De data adapter wordt vooraf in de configuratie opgegeven met het type Python. De functie geeft het desbetreffende dataframe door.
1. Er is geen data-adapter gedefinieerd. Deze wordt aangemaakt bij het runnen van de code. Let op: het configuratiebestand verandert niet mee.

Optie 1:

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    my_df_in:
        type: python
...
```
## Code
```python
config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
data_adapter.set_dataframe_adapter("my_df_in", input_df, if_not_exist="raise")
...
```
:::

Optie 2:

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    my_csv_in:
        type: csv
        file: "test_csv_in.csv"
...
```
## Code
```python
config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
data_adapter.set_dataframe_adapter("my_new_data_adapter", input_df, if_not_exist="create")
```
:::


### Wachtwoorden

Voor bepaalde diensten, zoals het toegang krijgen tot een database, is een wachtwoord vereist. Deze kunnen in de "environmental variables" worden meegegeven, in de vorm van een `.env` bestand.
```yaml
postgresql_host="xxx.xx.xx.xx"
postgresql_database="xxxxxxx"
postgresql_port="xxxx"
postgresql_password="xxxx"
postgresql_user="xx"
```
