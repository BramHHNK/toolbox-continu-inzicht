---
title: "Modules"
---

De Toolbox Continu Inzicht wordt incrementeel ontwikkeld. De IT-ontwikkeling is opgedeeld in sprintblokken. Binnen elk sprintblok worden één of meerdere modules ontwikkeld. Voor elke module worden Python-scripts ontwikkeld waarmee een functie kan worden uitgevoerd. Een voorbeeld van een functie is het inlezen van waterstanden uit FEWS. De scripts en de code (inclusief documentatie) worden na het afronden van iedere sprint gepubliceerd op deze Wikipagina en een publieke [Github](https://github.com/continu-inzicht/toolbox-continu-inzicht). De scripts worden vrijgegeven nadat deze succesvol het testprotocol hebben doorlopen.

De ontwikkeling van de volgende modules is voorzien:

1.  [Basis architectuur Toolbox Continu Inzicht](#sec-architectuur)
2.  [Belastingen inlezen en classificeren](#sec-belastingen)
3.  Bepalen fragility curves
4.  Bijstellen fragility curves (beheerdersoordeel in voorbereiding)
5.  Conditionele kansen en status waterkering per sectie
6.  Zorgplicht LBO2: effect nieuwe statistiek en rekenregels op de faalkans
7.  Inspectieresultaten inlezen en weergeven
8.  Resultaten ontsluiten via Digitale Delta API

## Basis architectuur Toolbox Continu Inzicht {#sec-architectuur}

De architectuur van de Toolbox Continu Inzicht is ontworpen om flexibel te zijn.

### Configuratie

Per systeem kunnen de wensen van de gebruiker veranderen. Het systeem is dan ook te configureren voor verschillende databronnen. Door middel van een `yaml` configuratiebestand wordt de juist informatie meegegeven aan de modules en de data adapter.

Het kopje `GlobalVariables` is verplicht met minimaal een `rootdir`: dit is een map waarin de data bestanden staan en weggeschreven worden. De `DataAdapter` is ook verplicht, met minimaal één data adapter. De naam van de data adapter is vrij te kiezen. Er kunnen zoveel data adapters aangemaakt worden, als gewenst. 
```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"

DataAdapter:
    EenTypeDataAdapter: 
        type: csv
        file: "eerste_voorbeeld.csv"
```


Onder `GlobalVariables` kan per datatype een variabele worden meegegeven die voor alle adapters van dit type gelden. Voor `csv` kan dit bijvoorbeeld het scheidingsteken zijn. Alle data adapters met het type `csv` krijgen nu de extra variabele mee. 
```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"

DataAdapter:
    default_options:
        csv:
    	    sep: ";"
    EenTypeDataAdapter: 
        type: csv
        file: "eerste_voorbeeld.csv"
    CSV_output: 
        type: csv
        file: "voorbeeld_output.csv"
```


Naast de data adapters worden modules ook geconfigureerd in de `GlobalVariables`. Zo worden de opties voor de module `LoadsMatroos` ook mee gegeven in de `GlobalVariables`. 
```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"
    
    LoadsMatroos:
        website: "noos"
        source: "dcsm6_kf"
        parameters: ["waterlevel"]
        MISSING_VALUE: 999

DataAdapter:
	...
```

De tijd waarop de berekening van de toolbox plaatsvindt is ook te configureren met `calc_time`. Deze tijd moet in het ISO 8601 format zijn en wordt uitgelezen met [datetime.datetime.fromisoformat](https://docs.python.org/3/library/datetime.html#datetime.date.fromisoformat). Indien geen tijd wordt meegegeven, maakt de `Config` klasse deze zelf aan met het tijdstip van runnen. 

```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"
    calc_time: '2024-11-18 08:00:00'
    
    LoadsMatroos:
        website: "noos"
        source: "dcsm6_kf"
        parameters: ["waterlevel"]
        MISSING_VALUE: 999

DataAdapter:
	...
```

### Data adapter

De data adapter wordt gebruikt om verschillende datatypes in en uit te lezen. Op dit moment zijn dit de volgende data formaten:

1.  CSV
2.  NetCDF
3.  PostgreSQL

Deze wordt geconfigureerd in de een `.yaml` configuratiebestand. Een voorbeeld van een csv-bestand wordt hieronder weergegeven. Hierbij zijn `type` en `file` of `path` verplicht. In het voorbeeld hieronder wordt een relatief pad meegegeven als `rootdir`, dit wordt ook ondersteund. 

```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    my_csv_in: 
        type: csv
        file: "test_csv_in.csv"
    my_csv_out: 
        type: csv
        file: "test_csv_out.csv"
...
```

Indien een bestand buiten de root directory valt kan in plaats van `file` ook een absoluut `path` worden meegegeven. 
```yaml 
DataAdapter:
    MyCSV_anders: 
        type: csv
        path: "C:/data/Ander/pad_naar_csv.csv"
...
```

Naast de verplichte opties, worden alle overige opties doorgegeven aan de output functie. De `csv` module maakt gebruik van de [pandas.read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) voor lees en werk. Alle opties die deze module ondersteund, kunnen worden doorgegeven. Voor  `NetCDF` is dit [xarray.open_dataset](https://docs.xarray.dev/en/stable/generated/xarray.open_dataset.html). Voor `PostgreSQL` dit niet het geval, hier zijn alleen een drie standaard opties beschikbaar: `database`, `schema` en `table`. 

#### Adapters aanmaken vanuit Python

Naast het definieren van data adapters via het configuratiebestand, kan dit ook vanuit Python zelf gedaan worden met de functie `set_dataframe_adapter`. 

Dit kan op twee manieren: 

1. De data adapter wordt vooraf in de configuratie opgegeven met het type Python. De functie geeft het desbetrefende dataframe door.
1. Er is geen data adapter gedefinieerd. Deze wordt aangemaakt bij het runnen van de code. Let op: het configuratiebestand verandert niet mee. 

Optie 1: 

```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    my_df_in: 
        type: python
...
```

```python
config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
data_adapter.set_dataframe_adapter("my_df_in", input_df, if_not_exist="raise")
...
```

Optie 2: 

```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    my_csv_in: 
        type: csv
        file: "test_csv_in.csv"
...
```

```python
config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
data_adapter.set_dataframe_adapter("my_new_data_adapter", input_df, if_not_exist="create")
```



### Wachtwoorden

Voor bepaalde diensten - zoals het toegang krijgen tot een database - is een wachtwoord vereist. Deze kunnen in de "environmental variables" worden meegegeven, in de vorm van een `.env` bestand. 
```yaml
postgresql_host="xxx.xx.xx.xx"
postgresql_database="xxxxxxx"
postgresql_port="xxxx"
postgresql_password="xxxx"
postgresql_user="xx"
```

## Belastingen inlezen en classificeren {#sec-belastingen}

In inzicht te krijgen in de veiligheid van waterkeringen is het van belang om de belastingen op de waterkeringen in kaart te brengen. Dit kunnen waterstanden op het buitenwater (zee, rivieren of meren) zijn, maar ook grondwaterstanden. De belastingen worden eerst ingelezen uit verschillende databronnen en vervolgens geclassificeerd. De belastingen worden ingelezen voor verschillende momenten (bijv. gister, nu, morgen of overmorgen etc.), zodat naast metingen ook voorspellingen van belastingen worden ingelezen. 

### Belastingen inlezen

De volgende databronnen worden op dit moment in de Toolbox Continu Inzicht ondersteund:

1. Delft-FEWS
2. (Noos)Matroos
3. RWS waterwebservices
4. RWS waterinfo

#### Delft-FEWS
Veel waterschappen gebruiken een [Delft - Forecast Early Warning System (FEWS)](https://www.deltares.nl/software-en-data/producten/delft-fews-zicht-op-verwachtingen) implementatie voor het beheren van verschillende interne en externe informatiebronnen. Via de REST API van FEWS kunnen verschillende belastingen worden ingelezen. Toegang verkrijgen tot een FEWS is complexer dan andere bronnen, waardoor het noodzakelijk is om extra parameters te definieren in het configuratiebestand.  De functie `get_fews_locations()` kan worden gebruikt om de beschikbare locaties te tonen. 

```Yaml

GlobalVariables:
    rootdir: "data_sets"  
    moments: [-24,0,24,48]
    

    LoadsFews:
        host: "https:**********"
        port: ****
        region: "fewspiservice"
        version: "1.25"
        filter: "HKV_WV_1"
        parameters: ["WNSHDB1"]  
        

DataAdapter:
	...
```

##### GlobalVariables:
- rootdir: Bestandlocatie van de invoer- en uitvoerbestanden
- moments: Momenten in uren waar gegevens voor opgehaald moet worden (bijv. -24, 0, +24, +48, +72 uur)


##### LoadsFews:
- host: Fews PI REST url
- port: Fews PI REST poortnummer
- region: FEWS PI REST regionaam
- version: FEWS PI versienummer
- filter: Filternaam zoals deze in FEWS wordt gebruikt
- parameters: Parameternaam zoals deze in FEWS wordt gebruikt


##### Invoer schema locaties:
- measurement_location_id (int): Meetlocatie id
- measurement_location_code (str): Meetlocatie code
- measurement_location_description (str): Meetlocatie omschrijving/naam


##### Uitvoer schema:    
- measurement_location_id (int): Meetlocatie id
- measurement_location_code (str): Meetlocatie code
- measurement_location_description (str): Meetlocatie omschrijving/naam
- parameter_id (int): Parameter id overeenkomstig Aquo-standaard
- parameter_code (str): Parameter code overeenkomstig Aquo-standaard
- parameter_description (str): Parameter omschrijving overeenkomstig Aquo-standaard
- unit (str): Eenheid van de waarde
- date_time (datetime): Datum en tijd van de waarde
- value (float): Waarde
- value_type (str): Type waarde: meting of verwachting


#### Matroos
Matroos of `Multifunctional Access Tool for Operational Oceandata Services` is een webbased distributiesysteem van de operationele verwachtingen van waterstanden, stroming, debieten en golven, van onder meer het Watermanagementcentrum Nederland. Matroos is beschikbaar voor verschillende doelgroepen, waarvan er - op dit moment - drie relevant zijn voor de ontwikkeling van de Toolbox Continu Inzicht. De verschillende versies worden in de tabel hieronder toegelicht. Voor meer informatie verwijzen we naar de nieuwsbrief op [iplo.nl](https://iplo.nl/publish/pages/132743/nieuwsbrief-matroos-no-22-26-maart-2024.pdf). In de Toolbox wordt nu alleen de series API gebruikt dus volstaat NOOS. 

| URL                                                     | Type           | Inhoud                                        | Doelgroep                             |
|---------------------------------------------------------|----------------|-----------------------------------------------|---------------------------------------|
| [vitaal.matroos.rws.nl](https://vitaal.matroos.rws.nl/) | extern, vitaal | 21 dagen                                      | Kustwacht, Waterschappen              |
| [matroos.rws.nl](https://matroos.rws.nl/)               | extern         | Volledige historie                            | Waterschappen, universiteiten, extene |
| [noos.matroos.rws.nl](https://noos.matroos.rws.nl/)     | extern, open   | Beperkte set; series:volledig; maps: 14 dagen | NOOS internationaal, Open Data        |

In Matroos zijn verschillende bronnen beschikbaar, met `get_matroos_sources()` kan een lijst van deze worden gegeneerd. De beschikbare locaties kunnen worden weergegeven met `get_matroos_locations()`, met mogelijkheid om te filteren op een bron en parameter. 

```Yaml

GlobalVariables:
    rootdir: "data_sets" 
    moments: [-24,0,24,48]
    ...

    LoadsMatroos:
        website: "noos" # noos, vitaal of matroos
        model: "observed"
        parameters: ["WATHTE"]

DataAdapter:
	...
```

Voor het gebruik van vitaal.matroos en matroos is een gebruikersnaam en wachtwoord nodig. Deze moeten in de environmental variables worden meegegeven (`.env` bestand). 

```yaml
vitaal_user: "..."
vitaal_password: "..."
# of 
matroos_user: "..."
matroos_password: "..."
```

#### RWS WaterWebservices
Via de RWS WaterWebservices zijn metingen en verwachtingen van o.a. waterstanden beschikbaar via de [WaterWebservices](https://rijkswaterstaatdata.nl/waterdata/) API. Vooral langs de rivieren zijn veel meetpunten beschikbaar. Deze API is openbaar en vereist weinig configuratie. De `MISSING_VALUE` kan in de configuratie worden aangepast, maar staat al standaard ingesteld.

```yaml
    LoadsWaterwebservicesRWS:
        parameters:  ["WATHTE"]
```

Beschikbare locaties kunnen worden weergegeven met `get_rws_webservices_locations()`. 

#### RWS Waterinfo
Naast de RWS WaterWebservices is alle informatie van Rijkswaterstaat ook verkrijgbaar via [waterinfo.rws.nl](https://waterinfo.rws.nl/). Deze is openbaar, wel moet de maptype als parameter worden opgegeven.


```yaml
 GlobalVariables:
    rootdir: "data_sets"
    moments: [-24,48]

    LoadsWaterinfo:
        parameters: ["waterhoogte"]

```
##### GlobalVariables:
- rootdir: Bestandlocatie van de invoer- en uitvoerbestanden
- moments: Momenten in uren waar gegevens voor opgehaald moet worden (bijv. -24, 0, +24, +48, +72 uur)

##### LoadsWaterinfo:
- parameters:

|omschrijving|maptype|periode|
|--|--|--|
|Waterhoogte in cm|waterhoogte|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit: -6,3<br>9d terug, 2d vooruit: -216,48<br>28d terug: -672,0| 
|Windsnelheid in m/s|wind|2d terug: -48,48<br>6u terug: -6,3<br>9d terug: -216,48<br>28d terug: -672,0| -48,48/-6,3/216,48/-672,0| 
|Golfhoogte in cm|golfhoogte|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit: -6,3<br>9d terug, 2d vooruit: -216,48<br>28d terug: -672,0| 
|Watertemperatuur in °C|watertemperatuur|2d terug: -48,0<br>6u terug: -6,0<br>9d terug: -216,0<br>28d terug:-672,0| 
|Luchttemperatuur in °C|luchttemperatuur|2d terug: -48,0<br>6u terug: -6,0<br>9d terug: -216,0<br>28d terug:-672,0| 
|Astronomisch getij|astronomische-getij|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit:-6,3<br>9d terug, 2d vooruit: -216,48<br>28d terug:-672,0|  
|Stroomsnelheid in m/s|stroming|2d terug: -48,0<br>6u terug:-6,0<br>9d terug: -216,0<br>28d terug:-672,0| 
|Debiet in m3/s|waterafvoer|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit: -6,3<br>9d terug, 2d vooruit:-216,48<br>28d terug:-672,0|
|Chloride in mg/l|zouten|2d terug: -48,0<br>6u terug: -6,0<br>9d terug: -216,0<br>28d terug:-672,0| 

##### Invoer schema locaties:
- measurement_location_id (int): Meetlocatie id
- measurement_location_code (str): Meetlocatie code
- measurement_location_description (str): Meetlocatie omschrijving/naam


##### Uitvoer schema:    
- measurement_location_id (int): Meetlocatie id
- measurement_location_code (str): Meetlocatie code
- measurement_location_description (str): Meetlocatie omschrijving/naam
- parameter_id (int): Parameter id overeenkomstig Aquo-standaard
- parameter_code (str): Parameter code overeenkomstig Aquo-standaard
- parameter_description (str): Parameter omschrijving overeenkomstig Aquo-standaard
- unit (str): Eenheid van de waarde
- date_time (datetime): Datum en tijd van de waarde
- value (float): Waarde
- value_type (str): Type waarde: meting of verwachting

### Classificeren van belastingen

De verschillende hierboven benoemde klasses voor het inlezen van belastingen geven een tijdreeks terug op bepaalde punten.

#### Classificeren van belastingen

Door vooraf grenswaardes voor belastingen te definieren, kunnen de belastingen worden geclassificeerd (bijv. 1x per 100 jaar waterstand). Dit kan met de klasse `LoadsClassify`.

#### Tijdreeks naar momenten

De ingelezen tijdsreeks met belastingen wordt omgezet naar belastingen op specifieke momenten met de klasse `LoadsToMoments`. 

Voor gebieden waar het getij van invloed is, is een aanvullende configuratie nodig. Bij getij wordt de maximale belasting tijdens een getijdecyclus (+/-12.25 uur) bepaald. Zonder deze configuratie wordt de belasting exact op het vooraf gedefinieerde moment bepaald. 

```yaml
 GlobalVariables:
    rootdir: "data_sets"
    moments: [-24,0,24,48]

    LoadsToMoments:
        tide: true

```

#### Toekennen van belastingen aan secties

De belastingen zijn nu beschikbaar in de meetlocaties van FEWS, Matroos, RWS Waterinfo en RWS WaterWebServices. De volgende stap is het vertalen van de belastingen in de meetpunten naar de secties (dijkvakken of kunstwerken) via de klasse `SectionsLoads`. Als een sectie tussen twee meetpunten ligt, wordt een interpolatiealgoritme (bijv. 25% waarde in meetpunt 1 + 75% waarde in meetpunt 2) toegepast. Dit interpolatiealgoritme is vooraf gedefinieerd.  


```{=html}
<!-- ## Bepalen fragility curves {#sec-Bepalen-fragility-curves}

Tekst na uitvoering aan te vulen 


## Bijstellen fragility curves {#sec-Bijstellen-fragility-curves}

Tekst na uitvoering aan te vulen 


## Conditionele kansen en status waterkering per sectie  {#sec-Conditionele-kansen}

Tekst na uitvoering aan te vulen 


## Zorgplicht LBO2: effect nieuwe statistiek en rekenregels op de faalkans {#sec-Zorgplicht}

Tekst na uitvoering aan te vulen 


## Inspectieresultaten inlezen en weergeven {#sec-Resltaten-inlezen}

Tekst na uitvoering aan te vulen 


## Resultaten ontsluiten via Digitale Delta API {#sec-Resltaten-ontsluiten}

Tekst na uitvoering aan te vulen -->
```
