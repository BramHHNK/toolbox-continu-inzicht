---
title: "Modules"
---

De Toolbox Continu Inzicht wordt incrementeel ontwikkeld. De IT-ontwikkeling is opgedeeld in sprintblokken.
Binnen elk sprintblok worden één of meerdere modules ontwikkeld. Voor elke module worden Python-scripts ontwikkeld waarmee een functie kan worden uitgevoerd.
Een voorbeeld van een functie is het inlezen van waterstanden uit FEWS.
De scripts en de code (inclusief documentatie) worden na het afronden van iedere sprint gepubliceerd op deze Wikipagina en een publieke [GitHub](https://github.com/continu-inzicht/toolbox-continu-inzicht).
De scripts worden vrijgegeven nadat deze succesvol het testprotocol hebben doorlopen.

De ontwikkeling van de volgende modules is voorzien:

1.  [Basis architectuur Toolbox Continu Inzicht](#sec-architectuur)
2.  [Belastingen inlezen en classificeren](#sec-belastingen)
3.  [Bepalen fragility curves](#sec-Bepalen-fragility-curves)
4.  [Bijstellen fragility curves](#sec-Bijstellen-fragility-curves) (beheerdersoordeel in voorbereiding)
5.  Conditionele kansen en status waterkering per sectie
6.  Zorgplicht LBO2: effect nieuwe statistiek en rekenregels op de faalkans
7.  Inspectieresultaten inlezen en weergeven
8.  Resultaten ontsluiten via Digitale Delta API

## Basis architectuur Toolbox Continu Inzicht {#sec-architectuur}

De architectuur van de Toolbox Continu Inzicht is ontworpen om flexibel te zijn.

### Configuratie

Per systeem kunnen de wensen van de gebruiker veranderen. Het systeem is dan ook te configureren voor verschillende databronnen.
Door middel van een `yaml` configuratiebestand wordt de juist informatie meegegeven aan de modules en de data-adapter.

Het kopje `GlobalVariables` is verplicht met minimaal een `rootdir`: dit is een map waarin de data bestanden staan en weggeschreven worden.
De `DataAdapter` is ook verplicht, met minimaal één data adapter. De naam van de data adapter is vrij te kiezen.
Er kunnen zoveel data adapters aangemaakt worden als gewenst.
```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"

DataAdapter:
    EenTypeDataAdapter:
        type: csv
        file: "eerste_voorbeeld.csv"
```


Onder `GlobalVariables` kan per datatype een variabele worden meegegeven die voor alle adapters van dit type gelden.
Voor `csv` kan dit bijvoorbeeld het scheidingsteken zijn.
Alle data adapters met het type `csv` krijgen nu de extra variabele mee.
```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"

DataAdapter:
    default_options:
        csv:
    	    sep: ";"
    EenTypeDataAdapter:
        type: csv
        file: "eerste_voorbeeld.csv"
    CSV_output:
        type: csv
        file: "voorbeeld_output.csv"
```


Naast de data-adapters worden modules ook geconfigureerd in de `GlobalVariables`. Zo worden de opties voor de module `LoadsMatroos` ook mee gegeven in de `GlobalVariables`.
```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"

    LoadsMatroos:
        website: "noos"
        source: "dcsm6_kf"
        parameters: ["waterlevel"]
        MISSING_VALUE: 999

DataAdapter:
	...
```

De tijd waarop de berekening van de toolbox plaatsvindt is ook te configureren met `calc_time`.
Deze tijd moet in het ISO 8601 format zijn en wordt uitgelezen met [datetime.datetime.fromisoformat](https://docs.python.org/3/library/datetime.html#datetime.date.fromisoformat).
Indien geen tijd wordt meegegeven, maakt de `Config` klasse deze zelf aan met het tijdstip van runnen.

```yaml
GlobalVariables:
    rootdir: "C:/data/toobox/"
    calc_time: '2024-11-18 08:00:00'

    LoadsMatroos:
        website: "noos"
        source: "dcsm6_kf"
        parameters: ["waterlevel"]
        MISSING_VALUE: 999

DataAdapter:
	...
```

### Data-adapter

De data-adapter wordt gebruikt om verschillende datatypes in en uit te lezen. Op dit moment zijn dit de volgende dataformaten:

1.  CSV
2.  NetCDF
3.  PostgreSQL

Deze wordt geconfigureerd in de een `.yaml` configuratiebestand. Een voorbeeld van een csv-bestand wordt hieronder weergegeven.
Hierbij zijn `type` en `file` of `path` verplicht. In het voorbeeld hieronder wordt een relatief pad meegegeven als `rootdir`, dit wordt ook ondersteund.

```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    my_csv_in:
        type: csv
        file: "test_csv_in.csv"
    my_csv_out:
        type: csv
        file: "test_csv_out.csv"
...
```

Indien een bestand buiten de root directory valt kan in plaats van `file` ook een absoluut `path` worden meegegeven.
```yaml
DataAdapter:
    MyCSV_anders:
        type: csv
        path: "C:/data/Ander/pad_naar_csv.csv"
...
```

Naast de verplichte waardes van een data-adapter worden ook alle overige opties doorgegeven.
Voor de generieke data-adapters is er een check of de extra opgegeven opties ondersteund worden.
Zo maakt de `csv` data adapter gebruik van [pandas.read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) en de `NetCDF` data adapter [xarray.open_dataset](https://docs.xarray.dev/en/stable/generated/xarray.open_dataset.html).
Voor `PostgreSQL` zijn alleen drie standaard opties beschikbaar: `database`, `schema` en `table`.

#### Adapters aanmaken vanuit Python

Naast het definiëren van data adapters via het configuratiebestand, kan dit ook vanuit Python zelf gedaan worden met de functie `set_dataframe_adapter`.

Dit kan op twee manieren:

1. De data adapter wordt vooraf in de configuratie opgegeven met het type Python. De functie geeft het desbetreffende dataframe door.
1. Er is geen data-adapter gedefinieerd. Deze wordt aangemaakt bij het runnen van de code. Let op: het configuratiebestand verandert niet mee.

Optie 1:

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    my_df_in:
        type: python
...
```
## Code
```python
config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
data_adapter.set_dataframe_adapter("my_df_in", input_df, if_not_exist="raise")
...
```
:::

Optie 2:

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"

DataAdapter:
    my_csv_in:
        type: csv
        file: "test_csv_in.csv"
...
```
## Code
```python
config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
data_adapter.set_dataframe_adapter("my_new_data_adapter", input_df, if_not_exist="create")
```
:::


### Wachtwoorden

Voor bepaalde diensten, zoals het toegang krijgen tot een database, is een wachtwoord vereist. Deze kunnen in de "environmental variables" worden meegegeven, in de vorm van een `.env` bestand.
```yaml
postgresql_host="xxx.xx.xx.xx"
postgresql_database="xxxxxxx"
postgresql_port="xxxx"
postgresql_password="xxxx"
postgresql_user="xx"
```

## Belastingen inlezen en classificeren {#sec-belastingen}

Om inzicht te krijgen in de veiligheid van waterkeringen is het van belang om de belastingen op de waterkeringen in kaart te brengen.
Dit kunnen waterstanden op het buitenwater (zee, rivieren of meren) zijn, maar ook grondwaterstanden.
De belastingen worden eerst ingelezen uit verschillende databronnen en vervolgens geclassificeerd.
De belastingen worden ingelezen voor verschillende momenten (bijv. gister, nu, morgen of overmorgen etc.), zodat naast metingen ook voorspellingen van belastingen worden ingelezen.

### Belastingen inlezen

De volgende databronnen worden op dit moment in de Toolbox Continu Inzicht ondersteund:

1. Delft-FEWS
2. (Noos)Matroos
3. RWS waterwebservices
4. RWS waterinfo

#### Delft-FEWS
Veel waterschappen gebruiken een [Delft - Forecast Early Warning System (FEWS)](https://www.deltares.nl/software-en-data/producten/delft-fews-zicht-op-verwachtingen) implementatie voor het beheren van verschillende interne en externe informatiebronnen.
Via de REST API van FEWS kunnen verschillende belastingen worden ingelezen.
Toegang verkrijgen tot een FEWS is complexer dan andere bronnen, waardoor het noodzakelijk is om extra parameters te definiëren in het configuratiebestand.
De functie `get_fews_locations()` kan worden gebruikt om de beschikbare locaties te tonen.

```Yaml
GlobalVariables:
    rootdir: "data_sets"  
    moments: [-24,0,24,48]


    LoadsFews:
        host: "https:**********"
        port: ****
        region: "fewspiservice"
        version: "1.25"
        filter: "HKV_WV_1"
        parameters: ["WNSHDB1"]  
       

DataAdapter:
	...
```

##### GlobalVariables:
- rootdir: Bestandslocatie van de invoer- en uitvoerbestanden
- moments: Momenten in uren waar gegevens voor opgehaald moet worden (bijv. -24, 0, +24, +48, +72 uur)


##### LoadsFews:
- host: Fews PI REST url
- port: Fews PI REST poortnummer
- region: FEWS PI REST regionaam
- version: FEWS PI versienummer
- filter: Filternaam zoals deze in FEWS wordt gebruikt
- parameters: Parameternaam zoals deze in FEWS wordt gebruikt


##### Invoer schema locaties:
- measurement_location_id (int): Meetlocatie id
- measurement_location_code (str): Meetlocatie code
- measurement_location_description (str): Meetlocatie omschrijving/naam


##### Uitvoer schema:
- measurement_location_id (int): Meetlocatie id
- measurement_location_code (str): Meetlocatie code
- measurement_location_description (str): Meetlocatie omschrijving/naam
- parameter_id (int): Parameter id overeenkomstig Aquo-standaard
- parameter_code (str): Parameter code overeenkomstig Aquo-standaard
- parameter_description (str): Parameter omschrijving overeenkomstig Aquo-standaard
- unit (str): Eenheid van de waarde
- date_time (datetime): Datum en tijd van de waarde
- value (float): Waarde
- value_type (str): Type waarde: meting of verwachting


#### Matroos
Matroos of `Multifunctional Access Tool for Operational Oceandata Services` is een webbased distributiesysteem van de operationele verwachtingen van waterstanden, stroming, debieten en golven, van onder meer het Watermanagementcentrum Nederland.
Matroos is beschikbaar voor verschillende doelgroepen, waarvan er op dit moment drie relevant zijn voor de ontwikkeling van de Toolbox Continu Inzicht.
De verschillende versies worden in de tabel hieronder toegelicht. Voor meer informatie verwijzen we naar de nieuwsbrief op [iplo.nl](https://iplo.nl/publish/pages/132743/nieuwsbrief-matroos-no-22-26-maart-2024.pdf).
In de Toolbox wordt nu alleen de series API gebruikt, dus volstaat NOOS.

| URL                                                     | Type           | Inhoud                                        | Doelgroep                             |
|---------------------------------------------------------|----------------|-----------------------------------------------|---------------------------------------|
| [vitaal.matroos.rws.nl](https://vitaal.matroos.rws.nl/) | extern, vitaal | 21 dagen                                      | Kustwacht, Waterschappen              |
| [matroos.rws.nl](https://matroos.rws.nl/)               | extern         | Volledige historie                            | Waterschappen, universiteiten, externe |
| [noos.matroos.rws.nl](https://noos.matroos.rws.nl/)     | extern, open   | Beperkte set; series:volledig; maps: 14 dagen | NOOS internationaal, Open Data        |

In Matroos zijn verschillende bronnen beschikbaar, met `get_matroos_sources()` kan een lijst van deze worden gegeneerd. De beschikbare locaties kunnen worden weergegeven met `get_matroos_locations()`, met mogelijkheid om te filteren op een bron en parameter.

```Yaml

GlobalVariables:
    rootdir: "data_sets"
    moments: [-24,0,24,48]
    ...

    LoadsMatroos:
        website: "noos" # noos, vitaal of matroos
        model: "observed"
        parameters: ["WATHTE"]

DataAdapter:
	...
```

Voor het gebruik van vitaal.matroos en matroos is een gebruikersnaam en wachtwoord nodig. Deze moeten in de environmental variables worden meegegeven (`.env` bestand).

```yaml
vitaal_user: "..."
vitaal_password: "..."
# of
matroos_user: "..."
matroos_password: "..."
```

#### RWS WaterWebservices
Via de RWS WaterWebservices zijn metingen en verwachtingen van o.a. waterstanden beschikbaar via de [WaterWebservices](https://rijkswaterstaatdata.nl/waterdata/) API.
Vooral langs de rivieren zijn veel meetpunten beschikbaar.
Deze API is openbaar en vereist weinig configuratie. De `MISSING_VALUE` kan in de configuratie worden aangepast, maar staat al standaard ingesteld.

```yaml
    LoadsWaterwebservicesRWS:
        parameters:  ["WATHTE"]
```

Beschikbare locaties kunnen worden weergegeven met `get_rws_webservices_locations()`.

#### RWS Waterinfo
Naast de RWS WaterWebservices is alle informatie van Rijkswaterstaat ook verkrijgbaar via [waterinfo.rws.nl](https://waterinfo.rws.nl/).
Waterinfo is bedoeld als informatieportaal, en niet als API om data op te halen. Voordat de WaterWebservices API beschikbaar was, werd de Waterinfo-website gebruikt in verschillende Continu Inzicht systemen.
Om de comptabiliteit met deze oudere Continu Inzicht systemen te behouden, is deze functie nu nog wel beschikbaar in de Toolbox Continu Inzicht.
Wel is in de toekomst mogelijk dat door veranderingen aan de Waterinfo-website deze ondersteuning komt te vervallen.


```yaml
 GlobalVariables:
    rootdir: "data_sets"
    moments: [-24,48]

    LoadsWaterinfo:
        parameters: ["waterhoogte"]

```
Omdat data ophalen uit Waterinfo gevoeliger is, worden de verschillende parameters hieronder weergegeven.

::: {.panel-tabset}
## Waterhoogte
|omschrijving|maptype|periode|
|--|--|--|
|Waterhoogte in cm|waterhoogte|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit: -6,3<br>9d terug, 2d vooruit: -216,48<br>28d terug: -672,0|

## Windsnelheid
|omschrijving|maptype|periode|
|--|--|--|
|Windsnelheid in m/s|wind|2d terug: -48,48<br>6u terug: -6,3<br>9d terug: -216,48<br>28d terug: -672,0| -48,48/-6,3/216,48/-672,0|

## Golfhoogte
|omschrijving|maptype|periode|
|--|--|--|
|Golfhoogte in cm|golfhoogte|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit: -6,3<br>9d terug, 2d vooruit: -216,48<br>28d terug: -672,0|

## Watertemperatuur
|omschrijving|maptype|periode|
|--|--|--|
|Watertemperatuur in °C|watertemperatuur|2d terug: -48,0<br>6u terug: -6,0<br>9d terug: -216,0<br>28d terug:-672,0|

## Luchttemperatuur
|omschrijving|maptype|periode|
|--|--|--|
|Luchttemperatuur in °C|luchttemperatuur|2d terug: -48,0<br>6u terug: -6,0<br>9d terug: -216,0<br>28d terug:-672,0|

## Astronomisch getij
|omschrijving|maptype|periode|
|--|--|--|
|Astronomisch getij|astronomische-getij|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit:-6,3<br>9d terug, 2d vooruit: -216,48<br>28d terug:-672,0|

## Stroomsnelheid
|omschrijving|maptype|periode|
|--|--|--|
|Stroomsnelheid in m/s|stroming|2d terug: -48,0<br>6u terug:-6,0<br>9d terug: -216,0<br>28d terug:-672,0|

## Debiet
|omschrijving|maptype|periode|
|--|--|--|
|Debiet in m3/s|waterafvoer|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit: -6,3<br>9d terug, 2d vooruit:-216,48<br>28d terug:-672,0|

## Chloride
|omschrijving|maptype|periode|
|--|--|--|
|Chloride in mg/l|zouten|2d terug: -48,0<br>6u terug: -6,0<br>9d terug: -216,0<br>28d terug:-672,0|

:::
<!-- |omschrijving|maptype|periode|
|--|--|--|
|Waterhoogte in cm|waterhoogte|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit: -6,3<br>9d terug, 2d vooruit: -216,48<br>28d terug: -672,0|
|Windsnelheid in m/s|wind|2d terug: -48,48<br>6u terug: -6,3<br>9d terug: -216,48<br>28d terug: -672,0| -48,48/-6,3/216,48/-672,0|
|Golfhoogte in cm|golfhoogte|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit: -6,3<br>9d terug, 2d vooruit: -216,48<br>28d terug: -672,0|
|Watertemperatuur in °C|watertemperatuur|2d terug: -48,0<br>6u terug: -6,0<br>9d terug: -216,0<br>28d terug:-672,0|
|Luchttemperatuur in °C|luchttemperatuur|2d terug: -48,0<br>6u terug: -6,0<br>9d terug: -216,0<br>28d terug:-672,0|
|Astronomisch getij|astronomische-getij|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit:-6,3<br>9d terug, 2d vooruit: -216,48<br>28d terug:-672,0|
|Stroomsnelheid in m/s|stroming|2d terug: -48,0<br>6u terug:-6,0<br>9d terug: -216,0<br>28d terug:-672,0|
|Debiet in m3/s|waterafvoer|2d terug, 2d vooruit: -48,48<br>6u terug, 3u vooruit: -6,3<br>9d terug, 2d vooruit:-216,48<br>28d terug:-672,0|
|Chloride in mg/l|zouten|2d terug: -48,0<br>6u terug: -6,0<br>9d terug: -216,0<br>28d terug:-672,0|  -->

##### Invoer schema locaties:
- measurement_location_id (int): Meetlocatie id
- measurement_location_code (str): Meetlocatie code
- measurement_location_description (str): Meetlocatie omschrijving/naam


##### Uitvoer schema:
- measurement_location_id (int): Meetlocatie id
- measurement_location_code (str): Meetlocatie code
- measurement_location_description (str): Meetlocatie omschrijving/naam
- parameter_id (int): Parameter id overeenkomstig Aquo-standaard
- parameter_code (str): Parameter code overeenkomstig Aquo-standaard
- parameter_description (str): Parameter omschrijving overeenkomstig Aquo-standaard
- unit (str): Eenheid van de waarde
- date_time (datetime): Datum en tijd van de waarde
- value (float): Waarde
- value_type (str): Type waarde: meting of verwachting

### Classificeren van belastingen

De verschillende hierboven benoemde functies voor het inlezen van belastingen geven een tijdreeks terug op bepaalde punten.
Deze kunnen omgezet worden naar moment, geclassificeerd met grenswaardes en toegekend aan dijkvakken.

#### Tijdreeks naar momenten

De ingelezen tijdsreeks met belastingen wordt omgezet naar belastingen op specifieke momenten met `LoadsToMoments`.

Voor gebieden waar het getij van invloed is, is een aanvullende configuratie nodig. Bij getij wordt de maximale belasting tijdens een getijdencyclus (+/-12.25 uur) bepaald.
Zonder deze configuratie wordt de belasting exact op het vooraf gedefinieerde moment bepaald.

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"
    moments: [-24,0,24,48]

    LoadsToMoments:
        tide: true

DataAdapter:
    default_options:
        csv:
            sep: ","
    waterstanden_waterinfo:
        type: csv
        path: "waterstanden_waterinfo.csv"
    waterstanden_waterinfo_maxima:
        type: csv
        path: "waterstanden_waterinfo_maxima.csv"

```
## Code
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.loads import LoadsToMoments

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
moments = LoadsToMoments(data_adapter=data_adapter)
moments.run(input="waterstanden_waterinfo", output="waterstanden_waterinfo_maxima")
```
:::

#### Classificeren van belastingen

Met `LoadsClassify` kunnen met vooraf gedefinieerde grenswaardes de belastingen worden geclassificeerd, bijvoorbeeld als waterstand die 1 keer per 100 jaar voorkomt.
Hierbij moeten de data-adapters van de grenswaardes en belastingen worden doorgegeven in een lijst.
Hierbij is de volgorde van de lijst belangrijk: eerst grenswaardes en dan belastingen. De belastingen moeten voor het classificeren aangeleverd worden als momentwaardes.

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_demo"
    moments: [-24,0,24,48]

    LoadsMaxima:
        tide: False

DataAdapter:
    default_options:
        csv:
            sep: ","
    waterstanden_waterinfo_maxima:
        type: csv
        path: "waterstanden_waterinfo_maxima.csv"
    waterinfo_klassengrenzen:
        type: csv
        path: "klassengrenzen.csv"
    waterstanden_waterinfo_klassen:
        type: csv
        path: "waterstanden_waterinfo_klassen.csv"
```

## Code
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.loads import LoadsClassify

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
classify = LoadsClassify(data_adapter=data_adapter)
classify.run(
    input=["waterinfo_klassengrenzen", "waterstanden_waterinfo_maxima"],
    output="waterstanden_waterinfo_klassen",
)
```
:::

#### Toekennen van belastingen aan secties

De belastingen zijn nu beschikbaar op de meetlocaties van FEWS, Matroos, RWS Waterinfo of RWS WaterWebServices.
De volgende stap is het vertalen van de belastingen in de meetpunten naar de secties (dijkvakken of kunstwerken) via `SectionsLoads`.
Voor het toekennen van belastingen aan secties zijn drie databronnen nodig: de dijkvakken, de belastingen en een koppeling tussen dijkvakken en belastinglocaties.
De drie data-adapters worden vervolgens doorgegeven als een lijst.
Hierbij is de eerder genoemde volgorde van belang: dijkvakken, belastingen en koppeling dijkvakken en belastinglocaties.
Als een sectie tussen twee meetpunten ligt, wordt een interpolatiealgoritme (bijv. 25% waarde in meetpunt 1 + 75% waarde in meetpunt 2) toegepast.
Omdat dit lokaal kan verschillen hoe deze interpolatie wordt gemaakt, is er geen automatische script voor.
De interpolatie moet dus vooraf gedefinieerd worden door de gebruiker en wordt meegegeven bij de koppeling tussen dijkvakken en belastinglocaties.
Hierbij wordt gebruik gemaakt van `fractionup` en `fractiondown` om het gewicht van de bovenstroomse en benedenstroomse belastinglocatie te bepalen.

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_demo"
    moments: [-24,0,24,48]

    SectionsLoads:
        MISSING_VALUE: -9999.0

DataAdapter:
    default_options:
        csv:
            sep: ","
    dijkvakken:
        type: csv
        path: "dijkvakken.csv"
    waterstanden:
        type: csv
        path: "waterstanden_waterinfo.csv"
    koppeling_dijkvak_belastinglocatie:
        type: csv
        path: "dijkvak_belastinglocatie.csv"
    waterstanden_per_dijkvak:
        type: csv
        path: "waterstanden_per_dijkvak.csv"
```
## Code
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.sections import SectionsLoads

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
sections_loads = SectionsLoads(data_adapter=data_adapter)
sections_loads.run(
    input=["dijkvakken", "waterstanden", "koppeling_dijkvak_belastinglocatie"],
    output="waterstanden_per_dijkvak",
)

```
:::

## Bepalen fragility curves {#sec-Bepalen-fragility-curves}

Fragility curves kunnen voor verschillende faalmechanismes worden berekend. Hier onder wordt per type faalmechanisme uitleg gegeven over de beschikbare functies.

### Golfoverslag Erosie Kruin en Binnentalud (GEKB){#sec-Bepalen-fragility-curves-GEKB}

Voor het bereken van fragility curves voor GEKB wordt gebruik gemaakt van de python module [`pydra-core`](https://pypi.org/project/pydra-core/). Deze los staande python module is ontwikkeld door HKV en is voor toolbox continu inzicht openbaar beschikaar gemaakt op [github](https://github.com/HKV-products-services/pydra_core). De documentatie van deze module is daar ook te vinden.

Een fragility curve kan berekend door de functie `FragilityCurveOvertopping` aan te roepen. Hier zijn drie dataframes voor nodig: de eeste met informatie over de hellingen, de tweede over het profiel en als laatste over de strijklente en de derde de bodem. Voor de berekening wordt model onzekerheid mee genomen. Hiervoor zijn een heel aantal standaard waardes gebruikt voor bretschneider waarmee golf hoogte en periode worden bepaald. Deze kunnen aangepast worden als opties in de `config.yaml`, zo als te zien in het voorbeeld met `gh_onz_mu`. Naast onzekerheden kan ook de verhouding tussen de piek periode van de golf (`$T_p$`) en de spectrale golfperiode (`$Tm_{-1,0}$`) worden aangepast met `tp_tspec` (standaard 1.1). De waterniveaus waarmee probablistisch gerekend wordt is verdeelt in twee delen: grof en fijn. Standaard zijn fijne stappen van 2m (`upper_limit_coarse`)  onder de kruin tot 1.01m (`upper_limit_fine`) boven de kruin met stappen van 0.05 (`hstap`). Standaard groven stappen lopen van 4m (`lower_limit_coarse`) onder de kruin tot 2m (`upper_limit_coarse`) onder de kruin met stappen van twee keer zo groot (2 * `hstap` = 0.1). Al deze variable zijn los configurable, als er niks wordt opgegeven, worden de standaard genoemde waardes gebruikt.

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"

    FragilityCurveOvertopping:
        gh_onz_mu: 0.96 # default waarde

DataAdapter:
    default_options:
        csv:
            sep: ","
    slopes:
        type: csv
        file: "slopes.csv"
    profiles:
        type: csv
        file: "profiles.csv"
    bedlevel_fetch:
        type: csv
        file: "bedlevelfetch.csv"
    fragility_curves:
        type: csv
        file: "fragility_curves.csv"

```
## Code
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.fragility_curves import FragilityCurveOvertopping

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
fragility_curve_overtopping = FragilityCurveOvertopping(data_adapter=data_adapter)
fragility_curve_overtopping.run(
    input=["slopes", "profiles", "bedlevel_fetch"],
    output="fragility_curves",
)

```
:::

### Piping (STPH) {#sec-Bepalen-fragility-curves-STPH}
Voor het bereken van fragility curves voor piping (STPH) wordt gebruik gemaakt van de python module [`probabilistic_piping`](https://pypi.org/project/pydra-core/). Deze los staande python module is ontwikkeld door HKV en is voor toolbox continu inzicht openbaar beschikaar gemaakt op [github](https://github.com/HKV-products-services/probabilistic_piping). De documentatie van deze module is daar ook te vinden.

#### FragilityCurvePipingFixedWaterlevelSimple {#sec-Bepalen-fragility-curves-STPH-combined}

Een fragility curve kan berekend door de functie `FragilityCurvePipingFixedWaterlevelSimple` aan te roepen. Hier zijn twee dataframes voor nodig: de eeste met informatie over de probabilitische berekening, de tweede met een reeks waterstanden waarvoor de fragility curve wordt afgeleid. Als opties kunnen debug en progress opties worden opgegeven in de `config.yaml`, standaard staan deze uit. De functie `FragilityCurvePipingFixedWaterlevelSimple` berekent een curve voor `sellmeijer`, `heave` en `uplift` en geeft de curve gecombineerde terug. Het combineren gebeurt hier door het minimum van de kansen over de drie sub mechanismes te nemen per waterstand.

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"

    FragilityCurvePipingFixedWaterlevelSimple:
        debug: False
        progress: True


DataAdapter:
    default_options:
        csv:
            sep: ","

    probabilistic_input:
        type: excel
        file: "invoer_piping.xlsx"
        index_col: 0
    waterlevels:
        type: csv
        file: "waterlevels.csv"
    fragility_curve:
        type: csv
        file: "fragility_curves_piping.csv"


```
## Code
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.fragility_curves import FragilityCurvePipingFixedWaterlevelSimple

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
fragility_curve_piping_fixed_waterlevel = FragilityCurvePipingFixedWaterlevelSimple(data_adapter=data_adapter)
fragility_curve_piping_fixed_waterlevel.run(
    input=["probabilistic_input", "waterlevels"],
    output="fragility_curves",
)

```
:::

## Combineren van fragility curves{#sec-Combineren-van-fragility-curves}

Fragility curves kunnen op drie manieren worden gecombineerd: Afhankelijk, onafhankelijk of met een gewogen gemiddelde.



## Bijstellen fragility curves {#sec-Bijstellen-fragility-curves}

### Verschuiven van een curve

Voor het simpel weg vershuiven van een curve is voor alle type fragility curves de functie `Shift*` beschikbaar, `*` de naam van de functie is.
Zo schuift `ShiftFragilityCurveOvertopping` de curve van `FragilityCurveOvertopping` naar rechts met een gegeven effect.
Belangrijk om hier te benoemen is dat de opties in GlobalVariables nogsteeds moeten verwijzen naar de originele functie, ook alle andere configuraties blijven hetzelfde.
In het voorbeeld hier onder is het dus `FragilityCurveOvertopping` in de GlobalVariables ookal wordt de `ShiftFragilityCurveOvertopping` functie aangeroepen, dit komt door het gebruik van overerving in python.

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"

    FragilityCurveOvertopping:
        gh_onz_mu: 0.96 # default waarde

DataAdapter:
    default_options:
        csv:
            sep: ","
    slopes:
        type: csv
        file: "slopes.csv"
    profiles:
        type: csv
        file: "profiles.csv"
    bedlevel_fetch:
        type: csv
        file: "bedlevelfetch.csv"
    fragility_curves:
        type: csv
        file: "fragility_curves.csv"

```
## Code
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.fragility_curves import ShiftFragilityCurveOvertopping

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
shifted_fragility_curve_overtopping = ShiftFragilityCurveOvertopping(data_adapter=data_adapter)
shifted_fragility_curve_overtopping.run(
    input=["slopes", "profiles", "bedlevel_fetch"],
    output="fragility_curves",
    effect=0.5
)

```
:::


### Aanpassen van de kruinhoogte

Voor het aanpassen van de kruinhoogte bij een [GEKB](#sec-Bepalen-fragility-curves-GEKB) is de functie `ChangeCrestHeightFragilityCurveOvertopping` beschikbaar, hier kan als effect mee gegeven worden wat de verandering van kruinhoogte is. De zelfde berekening als bij `FragilityCurveOvertopping` wordt dan uitgevoerd, maar met de aangepaste kruin hoogte.

::: {.panel-tabset}
## Configuratie
```yaml
GlobalVariables:
    rootdir: "data_sets"

    FragilityCurveOvertopping:
        gh_onz_mu: 0.96 # default waarde

DataAdapter:
    default_options:
        csv:
            sep: ","
    slopes:
        type: csv
        file: "slopes.csv"
    profiles:
        type: csv
        file: "profiles.csv"
    bedlevel_fetch:
        type: csv
        file: "bedlevelfetch.csv"
    fragility_curves:
        type: csv
        file: "fragility_curves.csv"

```
## Code
```python
from toolbox_continu_inzicht import Config, DataAdapter
from toolbox_continu_inzicht.fragility_curves import ChangeCrestHeightFragilityCurveOvertopping

config = Config(config_path="config.yaml")
config.lees_config()
data_adapter = DataAdapter(config=config)
change_crest_fragility_curve_overtopping = ChangeCrestHeightFragilityCurveOvertopping(data_adapter=data_adapter)
change_crest_fragility_curve_overtopping.run(
    input=["slopes", "profiles", "bedlevel_fetch"],
    output="fragility_curves",
    effect=1
)

```
:::

```{=html}
<!--
## Conditionele kansen en status waterkering per sectie  {#sec-Conditionele-kansen}

Tekst na uitvoering aan te vulen


## Zorgplicht LBO2: effect nieuwe statistiek en rekenregels op de faalkans {#sec-Zorgplicht}

Tekst na uitvoering aan te vulen


## Inspectieresultaten inlezen en weergeven {#sec-Resltaten-inlezen}

Tekst na uitvoering aan te vulen


## Resultaten ontsluiten via Digitale Delta API {#sec-Resltaten-ontsluiten}

Tekst na uitvoering aan te vulen -->
```
